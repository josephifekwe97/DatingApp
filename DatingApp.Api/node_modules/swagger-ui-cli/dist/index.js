"use strict";
/**
 * swagger-ui-cli - Standalone Swagger UI server
 * Copyright (C) 2020  e.GO Digital GmbH, Aachen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// THIS HAS TO BE VERY FIRST!
const cli_1 = __importStar(require("./cli"));
const request_1 = __importDefault(require("./request"));
const is_docker_1 = __importDefault(require("is-docker"));
const open_1 = __importDefault(require("open"));
const path_1 = __importDefault(require("path"));
const sanitizeFilename = require('sanitize-filename');
const toml_1 = __importDefault(require("@iarna/toml"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const http_1 = require("http");
const contracts_1 = require("./contracts");
const utils_1 = require("./utils");
const docs_1 = require("./docs");
const globals_1 = require("./globals");
function getSafeFilename(name) {
    if (name === '') {
        name = 'swagger';
    }
    return sanitizeFilename(name.trim());
}
function loadDocument(pathOrUri) {
    let docReader = false;
    let swaggerFile = pathOrUri;
    if (swaggerFile !== '') {
        if (swaggerFile.startsWith('https://') || swaggerFile.startsWith('http://')) {
            // download from HTTP server
            docReader = docs_1.createHttpDocReader(swaggerFile);
        }
        else {
            // local file
            if (!path_1.default.isAbsolute(swaggerFile)) {
                swaggerFile = path_1.default.join(process.cwd(), swaggerFile);
            }
            docReader = docs_1.createLocalFileDocReader(swaggerFile);
        }
    }
    if (!docReader) {
        noSwaggerFile();
    }
    return docReader();
}
function noSwaggerFile() {
    cli_1.exitWith(contracts_1.ExitCode.NoDocumentDefined, 'Please define at least one file with a Swagger documentation!');
}
async function run() {
    if (process.argv.length < 3) {
        cli_1.default.showHelp(contracts_1.ExitCode.ShowHelp);
    }
    const shouldNotOpen = cli_1.default.flags.doNotOpen;
    const port = cli_1.default.flags.port;
    // TODO: implement HTTPs support
    let createHttpServer = () => http_1.createServer(request_1.default());
    // Swagger document
    {
        let swaggerDoc;
        const sources = cli_1.default.input
            .map(i => i.trim())
            .filter(i => i !== '');
        if (sources.length) {
            // TODO: support more than 1 document
            swaggerDoc = await loadDocument(sources[0]);
        }
        else {
            noSwaggerFile();
        }
        if (typeof swaggerDoc !== 'object' || Array.isArray(swaggerDoc)) {
            cli_1.exitWith(contracts_1.ExitCode.InvalidDocumentType, 'Swagger document must be a plain object!');
        }
        // we are currently supporting only 1 document (s. aboves)
        globals_1.swaggerDocuments[''] = {
            fileName: getSafeFilename(''),
            json: Buffer.from(JSON.stringify(swaggerDoc), contracts_1.DEFAULT_CHARSET),
            object: swaggerDoc,
            toml: Buffer.from(toml_1.default.stringify(swaggerDoc), contracts_1.DEFAULT_CHARSET),
            yaml: Buffer.from(js_yaml_1.default.safeDump(swaggerDoc), contracts_1.DEFAULT_CHARSET)
        };
    }
    // create and start server
    const server = createHttpServer();
    server.listen(port, () => {
        const localUri = `http://127.0.0.1:${port}`;
        console.log('🏄', 'Swagger UI running:');
        console.log(`   * ${localUri}`);
        if (!shouldNotOpen && !is_docker_1.default()) {
            utils_1.withSpinner(`Open Swagger UI from ${localUri}`, async (spinner) => {
                try {
                    await open_1.default(localUri);
                }
                catch (e) {
                    spinner.warn(`Could not open ${localUri}: ${e}`);
                }
            }, '📖');
        }
    });
}
run().catch(err => {
    console.error('🚨', err);
    process.exit(contracts_1.ExitCode.UncaughtError);
});
//# sourceMappingURL=index.js.map