"use strict";
/**
 * swagger-ui-cli - Standalone Swagger UI server
 * Copyright (C) 2020  e.GO Digital GmbH, Aachen, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withSpinner = exports.normalizePath = exports.hashData = exports.stat = exports.readFile = exports.exists = void 0;
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const contracts_1 = require("./contracts");
/**
 * Promise version of 'fs.exists()'.
 */
exports.exists = util_1.promisify(fs_1.default.exists);
/**
 * Promise version of 'fs.readFile()'.
 */
exports.readFile = util_1.promisify(fs_1.default.readFile);
/**
 * Promise version of 'fs.stat()'.
 */
exports.stat = util_1.promisify(fs_1.default.stat);
/**
 * Hashes data with SHA-256.
 *
 * @param {Buffer} data The data to hash.
 *
 * @returns {string} The SHA-256 hash.
 */
function hashData(data) {
    return crypto_1.default.createHash('sha256')
        .update(data)
        .digest('hex');
}
exports.hashData = hashData;
/**
 * Normalizes a path.
 *
 * @param {string} p The path.
 *
 * @returns {string} The normalized value.
 */
function normalizePath(p) {
    if (p === null || typeof p === 'undefined') {
        p = '';
    }
    else {
        p = String(p);
    }
    p = p.trim().split(path_1.default.sep).join('/');
    while (p.endsWith('/')) {
        p = p.substr(0, p.length - 1).trim();
    }
    if (!p.startsWith('/')) {
        p = '/' + p;
    }
    return p;
}
exports.normalizePath = normalizePath;
/**
 * Executes an async action, using a spinner.
 *
 * @param {string} text The initial text.
 * @param {Function} action The action to invoke.
 * @param {string} [symbol] The custom success symbol to use.
 *
 * @returns {Promise<TResult>} The promise with the result of the action.
 */
async function withSpinner(text, action, symbol = 'âœ…') {
    const spinner = ora_1.default(text);
    try {
        spinner.start();
        const result = await action(spinner);
        spinner.stopAndPersist({ symbol });
        return result;
    }
    catch (e) {
        spinner.fail(`${text}: ${e}`);
        process.exit(contracts_1.ExitCode.UncaughtError);
    }
}
exports.withSpinner = withSpinner;
//# sourceMappingURL=utils.js.map